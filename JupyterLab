import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from skimage import io
from skimage.transform import rotate

# Load STL-10 dataset
def load_stl10_dataset():
    X = []
    y = []

    # Load train images
    for i in range(1, 11):
        images = io.imread_collection(f'./data/stl10_binary/train_X_part{i}.bin')
        labels = np.fromfile(f'./data/stl10_binary/train_y_part{i}.bin', dtype=np.uint8)
        X.extend(images)
        y.extend(labels)

    # Load test images
    test_images = io.imread_collection('./data/stl10_binary/test_X.bin')
    test_labels = np.fromfile('./data/stl10_binary/test_y.bin', dtype=np.uint8)

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    return np.array(X_train), np.array(X_test), np.array(y_train), np.array(y_test)

# Preprocess data (flip images vertically)
def preprocess_data(X):
    flipped_X = [np.flipud(x) for x in X]
    X_preprocessed = np.concatenate((X, flipped_X))
    y_preprocessed = np.concatenate((np.zeros(len(X)), np.ones(len(flipped_X))))
    return X_preprocessed, y_preprocessed

# Load and preprocess dataset
X_train, X_test, y_train, y_test = load_stl10_dataset()
X_train, y_train = preprocess_data(X_train)
X_test, y_test = preprocess_data(X_test)

# Flatten images
X_train = X_train.reshape(len(X_train), -1)
X_test = X_test.reshape(len(X_test), -1)

# Train SVM model
svm_model = SVC(kernel='linear')
svm_model.fit(X_train, y_train)

# Predict on test set
y_pred = svm_model.predict(X_test)

# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
