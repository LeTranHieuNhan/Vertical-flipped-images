import tensorflow as tf
from tensorflow.keras import datasets, layers, models
from sklearn.model_selection import train_test_split
import numpy as np

# Load STL-10 dataset
(train_images, train_labels), (test_images, test_labels) = datasets.stl10.load_data()

# Preprocess data
train_images = train_images / 255.0
test_images = test_images / 255.0

# Create labels for vertical flip
train_labels_flipped = np.ones_like(train_labels)
test_labels_flipped = np.ones_like(test_labels)

# Split trainset into trainset and validation set (80-20 ratio)
train_images, val_images, train_labels, val_labels, train_labels_flipped, val_labels_flipped = train_test_split(
    train_images, train_labels, train_labels_flipped, test_size=0.2, random_state=42)

# Add a new axis to the labels for vertical flip
train_labels = tf.expand_dims(train_labels, axis=-1)
val_labels = tf.expand_dims(val_labels, axis=-1)
test_labels = tf.expand_dims(test_labels, axis=-1)
train_labels_flipped = tf.expand_dims(train_labels_flipped, axis=-1)
val_labels_flipped = tf.expand_dims(val_labels_flipped, axis=-1)
test_labels_flipped = tf.expand_dims(test_labels_flipped, axis=-1)

# Define model architecture
model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(96, 96, 3)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(2)  # Output layer for binary classification
])

# Compile the model
model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

# Train the model
history = model.fit(train_images, train_labels_flipped, epochs=10, 
                    validation_data=(val_images, val_labels_flipped))

# Evaluate the model on test set
test_loss, test_acc = model.evaluate(test_images, test_labels_flipped, verbose=2)
print('\nTest accuracy:', test_acc)
